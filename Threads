// MultiThreading
package com.halls;
import java.util.*;
class Hi extends Thread // One method of achieving Multithreading by extending thread
{
	public void run()
	{
		for(int i=1;i<=5;i++)
		{
			System.out.println("Hi");
			try{Thread.sleep(1000);}catch(Exception e){}
		}
	}
	
}
class Hello extends Thread
{
	public void run()
	{
		for(int i=1;i<=5;i++)
		{
			System.out.println("Hello");
			try{Thread.sleep(1000);}catch(Exception e){}
		}
	}
	
}
public class MultiThreadingExample {

	public static void main(String[] args) {// main is the default thread
		
		Hi obj1 = new Hi();
		Hello obj2 = new Hello();
		// MultiThreading is the process of doing multiple task simultaneously
		
		obj1.start();// This line will call run method
		try{Thread.sleep(10);}catch(Exception e){}
		obj2.start();

	}

}
package com.halls;
class Hii implements Runnable
{

	@Override
	public void run() {
		for(int i=1;i<=5;i++)
		{
			System.out.println("Hi");
			try{Thread.sleep(1000);}catch(Exception e){}
		}
		
		
	}
	
}
class Helloo implements Runnable
{

	@Override
	public void run() {
		for(int i=1;i<=5;i++)
		{
			System.out.println("Hello");
			try{Thread.sleep(1000);}catch(Exception e){}
		}
	}
	
}
public class MultiThreadingInterfaceExample {

	public static void main(String[] args) throws Exception{
		
		Runnable obj1= new Hii();
		Runnable obj2= new Helloo();
	//Name	
		Thread t1= new Thread(obj1,"My Thread1");
		Thread t2= new Thread(obj2,"My Thread2");
		System.out.println(t1.getName());
		System.out.println(t2.getName());
		
	//Name	
		t1.setName("Hi Thread");
		t2.setName("Hello Thread");
		
		System.out.println(t1.getName());
		System.out.println(t2.getName());
	
		
	// Priority
		t1.setPriority(Thread.MIN_PRIORITY);
		t2.setPriority(Thread.MAX_PRIORITY);
		
		System.out.println(t1.getPriority());
		System.out.println(t2.getPriority());
		
		
		t1.start();
		try{Thread.sleep(10);}catch(Exception e) {};
		t2.start();
		
		t1.join();// This will show exception so we should handle exception in main by throws exception
		t2.join();
		System.out.println(t1.isAlive());// this shows whether the tread is alive or not
		System.out.println(t2.isAlive());
		System.out.println("Bye");// When we doesn't use join main thread is also simultaneously
		//running so it will before new threads t1 and t2 are completed
		
	}

}


